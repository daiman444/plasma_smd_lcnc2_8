#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2014 UAVpilot from cnc-club.ru
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

from lxml import etree
import re
import sys, os


def error_inp():
    print >> sys.stderr, "ERROR: Invalid format of inputfile."
    sys.exit(1)

def pinname(ref, num):
    components.find

if len(sys.argv) != 3:
    print >> sys.stderr, "Usage: "+sys.argv[0]+" inputfile outputfile"
    sys.exit(1)
    
parser = etree.XMLParser()
xml = etree.parse(sys.argv[1], parser)
if len(parser.error_log) > 0:
    error = parser.error_log[0]
    print >> sys.stderr, 'ERROR: '+error.message
    sys.exit(1)
   
if len(xml.xpath("/export")) == 0:
    error_inp()
    
Design = xml.xpath("/export/design")
if len(Design) == 0:
    error_inp()
Design = Design[0]

out = open(sys.argv[2], "w")
out.write("### Generated by VisualHAL\n")
for e in Design:
    out.write("### "+e.text.encode("utf-8")+"\n")
out.write("\n")

out.write("#loadrt threads name1=servo-thread period1=1000000\n\n")
    
root = xml.xpath("/export/libparts")
if len(root) == 0:
    error_inp()
root = root[0]
Libparts = {}
for lp in root:
    lib = lp.get('lib')
    part = lp.get('part').lower()
    param = {}
    fields = lp.find('fields')
    if fields != None:
        for f in fields:
            n = f.get('name')
            v = f.text
            param[n] = v
    pin = {}
    pins = lp.find('pins')
    if pins != None:
        for p in pins:
            n = p.get('num')
            v = p.get('name')
            pin[n] = v
    Libparts[lib, part] = {'param':param, 'pin':pin}

#print Libparts


root = xml.xpath("/export/components")
if len(root) == 0:
    error_inp()
root = root[0]
HALcomps = {}
LoadComps = {}
refre = re.compile('#\d+$')
for e in root:
    comp = e.find("value").text
    try:
        LoadComps[comp]
    except:
        LoadComps[comp] = []
    ref = e.get("ref")
    libsource = e.find('libsource')
    param = {}
    label = refre.sub('', ref)
    fields = e.find('fields')
    if fields != None:
        for f in fields:
            n = f.get('name')
            v = f.text
            if n == "label":
                label = v
            else:
                param[n] = v
    attr = {'label':label, 'libsource':[libsource.get('lib'),libsource.get('part').lower()],'param':param}
    HALcomps[e.get("ref")] = attr
    LoadComps[comp].append(label)

#print HALcomps

for c, le in LoadComps.iteritems():
    str = "loadrt "+c.lower()+" names="
    for e in le:
        str += e+","
    str = str[:-1]
    out.write(str+"\n")
    for e in le:
        out.write("addf "+e+" servo-thread\n")
    out.write("\n")    

for c in HALcomps:
    x = 0
    cparam = HALcomps[c]['param']
    ls = HALcomps[c]['libsource']
    lparam = Libparts[ls[0], ls[1]]['param']
    if cparam != {}:
        for p in cparam.keys():
            if cparam[p] != lparam[p]:
                out.write("setp "+HALcomps[c]['label']+"."+p+" "+cparam[p]+"\n")
                x += 1
    if x > 0:
        out.write("\n")

root = xml.xpath("/export/libraries")
if len(root) == 0:
    error_inp()
Libraries = root[0]

    
nets = xml.xpath("/export/nets")
if len(nets) == 0:
    error_inp()
nets = nets[0]
for net in nets:
    code = net.get('code')
    name = net.get('name')
    if name == "":
        name = "_vhal."+code
    out.write("net "+name)
    for node in net:
        ref = node.get('ref')
        pin = node.get('pin')
        ls = HALcomps[ref]['libsource']
        halpin = HALcomps[ref]['label']+'.'+Libparts[ls[0], ls[1]]['pin'][pin]
        out.write(" "+halpin)
    out.write("\n")

out.close()

